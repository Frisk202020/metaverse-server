{"$message_type":"diagnostic","message":"the trait bound `Result<std::net::SocketAddr, AddrParseError>: tokio::net::ToSocketAddrs` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":239,"byte_end":245,"line_start":10,"line_end":10,"column_start":50,"column_end":56,"is_primary":true,"text":[{"text":"    let listener = tokio::net::TcpListener::bind(socket).await.unwrap();","highlight_start":50,"highlight_end":56}],"label":"the trait `tokio::net::ToSocketAddrs` is not implemented for `Result<std::net::SocketAddr, AddrParseError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":209,"byte_end":238,"line_start":10,"line_end":10,"column_start":20,"column_end":49,"is_primary":false,"text":[{"text":"    let listener = tokio::net::TcpListener::bind(socket).await.unwrap();","highlight_start":20,"highlight_end":49}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `tokio::net::ToSocketAddrs`:\n  &T\n  &[std::net::SocketAddr]\n  (&str, u16)\n  (IpAddr, u16)\n  (Ipv4Addr, u16)\n  (Ipv6Addr, u16)\n  (String, u16)\n  SocketAddrV4\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tokio::net::TcpListener::bind`","code":null,"level":"note","spans":[{"file_name":"/home/frisk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.44.2/src/net/tcp/listener.rs","byte_start":3418,"byte_end":3431,"line_start":102,"line_end":102,"column_start":30,"column_end":43,"is_primary":true,"text":[{"text":"        pub async fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {","highlight_start":30,"highlight_end":43}],"label":"required by this bound in `TcpListener::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Result<std::net::SocketAddr, AddrParseError>: tokio::net::ToSocketAddrs` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:10:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let listener = tokio::net::TcpListener::bind(socket).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `tokio::net::ToSocketAddrs` is not implemented for `Result<std::net::SocketAddr, AddrParseError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `tokio::net::ToSocketAddrs`:\u001b[0m\n\u001b[0m              &T\u001b[0m\n\u001b[0m              &[std::net::SocketAddr]\u001b[0m\n\u001b[0m              (&str, u16)\u001b[0m\n\u001b[0m              (IpAddr, u16)\u001b[0m\n\u001b[0m              (Ipv4Addr, u16)\u001b[0m\n\u001b[0m              (Ipv6Addr, u16)\u001b[0m\n\u001b[0m              (String, u16)\u001b[0m\n\u001b[0m              SocketAddrV4\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::net::TcpListener::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/frisk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.44.2/src/net/tcp/listener.rs:102:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub async fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `TcpListener::bind`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Result<std::net::SocketAddr, AddrParseError>: tokio::net::ToSocketAddrs` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":209,"byte_end":246,"line_start":10,"line_end":10,"column_start":20,"column_end":57,"is_primary":true,"text":[{"text":"    let listener = tokio::net::TcpListener::bind(socket).await.unwrap();","highlight_start":20,"highlight_end":57}],"label":"the trait `tokio::net::ToSocketAddrs` is not implemented for `Result<std::net::SocketAddr, AddrParseError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `tokio::net::ToSocketAddrs`:\n  &T\n  &[std::net::SocketAddr]\n  (&str, u16)\n  (IpAddr, u16)\n  (Ipv4Addr, u16)\n  (Ipv6Addr, u16)\n  (String, u16)\n  SocketAddrV4\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tokio::net::TcpListener::bind`","code":null,"level":"note","spans":[{"file_name":"/home/frisk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.44.2/src/net/tcp/listener.rs","byte_start":3418,"byte_end":3431,"line_start":102,"line_end":102,"column_start":30,"column_end":43,"is_primary":true,"text":[{"text":"        pub async fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {","highlight_start":30,"highlight_end":43}],"label":"required by this bound in `TcpListener::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Result<std::net::SocketAddr, AddrParseError>: tokio::net::ToSocketAddrs` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:10:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let listener = tokio::net::TcpListener::bind(socket).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `tokio::net::ToSocketAddrs` is not implemented for `Result<std::net::SocketAddr, AddrParseError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `tokio::net::ToSocketAddrs`:\u001b[0m\n\u001b[0m              &T\u001b[0m\n\u001b[0m              &[std::net::SocketAddr]\u001b[0m\n\u001b[0m              (&str, u16)\u001b[0m\n\u001b[0m              (IpAddr, u16)\u001b[0m\n\u001b[0m              (Ipv4Addr, u16)\u001b[0m\n\u001b[0m              (Ipv6Addr, u16)\u001b[0m\n\u001b[0m              (String, u16)\u001b[0m\n\u001b[0m              SocketAddrV4\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::net::TcpListener::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/frisk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.44.2/src/net/tcp/listener.rs:102:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub async fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `TcpListener::bind`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Result<std::net::SocketAddr, AddrParseError>: tokio::net::ToSocketAddrs` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":247,"byte_end":252,"line_start":10,"line_end":10,"column_start":58,"column_end":63,"is_primary":true,"text":[{"text":"    let listener = tokio::net::TcpListener::bind(socket).await.unwrap();","highlight_start":58,"highlight_end":63}],"label":"the trait `tokio::net::ToSocketAddrs` is not implemented for `Result<std::net::SocketAddr, AddrParseError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":247,"byte_end":252,"line_start":10,"line_end":10,"column_start":58,"column_end":63,"is_primary":false,"text":[{"text":"    let listener = tokio::net::TcpListener::bind(socket).await.unwrap();","highlight_start":58,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `tokio::net::ToSocketAddrs`:\n  &T\n  &[std::net::SocketAddr]\n  (&str, u16)\n  (IpAddr, u16)\n  (Ipv4Addr, u16)\n  (Ipv6Addr, u16)\n  (String, u16)\n  SocketAddrV4\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tokio::net::TcpListener::bind`","code":null,"level":"note","spans":[{"file_name":"/home/frisk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.44.2/src/net/tcp/listener.rs","byte_start":3418,"byte_end":3431,"line_start":102,"line_end":102,"column_start":30,"column_end":43,"is_primary":true,"text":[{"text":"        pub async fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {","highlight_start":30,"highlight_end":43}],"label":"required by this bound in `TcpListener::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Result<std::net::SocketAddr, AddrParseError>: tokio::net::ToSocketAddrs` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:10:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let listener = tokio::net::TcpListener::bind(socket).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `tokio::net::ToSocketAddrs` is not implemented for `Result<std::net::SocketAddr, AddrParseError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `tokio::net::ToSocketAddrs`:\u001b[0m\n\u001b[0m              &T\u001b[0m\n\u001b[0m              &[std::net::SocketAddr]\u001b[0m\n\u001b[0m              (&str, u16)\u001b[0m\n\u001b[0m              (IpAddr, u16)\u001b[0m\n\u001b[0m              (Ipv4Addr, u16)\u001b[0m\n\u001b[0m              (Ipv6Addr, u16)\u001b[0m\n\u001b[0m              (String, u16)\u001b[0m\n\u001b[0m              SocketAddrV4\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::net::TcpListener::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/frisk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.44.2/src/net/tcp/listener.rs:102:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub async fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `TcpListener::bind`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
